
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 28 20:16:22 CDT 2014
//----------------------------------------------------

package Intermedio;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import javax.swing.*;
import Clases.*;
import phpmorita.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 28 20:16:22 CDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\021\002\000\002\002" +
    "\004\000\002\022\002\000\002\004\017\000\002\007\003" +
    "\000\002\007\002\000\002\003\004\000\002\003\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\023\002\000\002\024\002\000\002" +
    "\025\002\000\002\012\015\000\002\013\006\000\002\013" +
    "\002\000\002\026\002\000\002\027\002\000\002\030\002" +
    "\000\002\031\002\000\002\014\015\000\002\032\002\000" +
    "\002\015\007\000\002\033\002\000\002\020\005\000\002" +
    "\034\002\000\002\016\006\000\002\035\002\000\002\016" +
    "\010\000\002\036\002\000\002\017\010\000\002\037\002" +
    "\000\002\017\012\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\004\000\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\011\001\002\000\004\002\uffff\001\002\000" +
    "\004\006\012\001\002\000\004\150\013\001\002\000\004" +
    "\007\014\001\002\000\004\010\015\001\002\000\004\011" +
    "\016\001\002\000\004\012\017\001\002\000\016\043\022" +
    "\116\032\142\030\144\021\147\035\152\027\001\002\000" +
    "\022\013\uffd0\043\uffd0\116\uffd0\141\uffd0\142\uffd0\144\uffd0" +
    "\147\uffd0\152\uffd0\001\002\000\004\120\151\001\002\000" +
    "\012\017\141\120\041\151\043\152\045\001\002\000\022" +
    "\013\uffce\043\uffce\116\uffce\141\uffce\142\uffce\144\uffce\147" +
    "\uffce\152\uffce\001\002\000\022\013\uffd2\043\uffd2\116\uffd2" +
    "\141\uffd2\142\uffd2\144\uffd2\147\uffd2\152\uffd2\001\002\000" +
    "\022\013\uffd3\043\uffd3\116\uffd3\141\uffd3\142\uffd3\144\uffd3" +
    "\147\uffd3\152\uffd3\001\002\000\020\013\ufffe\043\022\116" +
    "\032\142\030\144\021\147\035\152\027\001\002\000\004" +
    "\137\uffdf\001\002\000\004\120\070\001\002\000\022\013" +
    "\ufff9\043\ufff9\116\ufff9\141\ufff9\142\ufff9\144\ufff9\147\ufff9" +
    "\152\ufff9\001\002\000\004\120\040\001\002\000\022\013" +
    "\uffd1\043\uffd1\116\uffd1\141\uffd1\142\uffd1\144\uffd1\147\uffd1" +
    "\152\uffd1\001\002\000\022\013\uffcf\043\uffcf\116\uffcf\141" +
    "\uffcf\142\uffcf\144\uffcf\147\uffcf\152\uffcf\001\002\000\004" +
    "\122\uffdd\001\002\000\004\122\037\001\002\000\022\013" +
    "\uffdc\043\uffdc\116\uffdc\141\uffdc\142\uffdc\144\uffdc\147\uffdc" +
    "\152\uffdc\001\002\000\012\017\042\120\041\151\043\152" +
    "\045\001\002\000\010\120\041\151\043\152\045\001\002" +
    "\000\004\150\061\001\002\000\032\121\ufff4\122\ufff4\123" +
    "\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\133\ufff4" +
    "\134\ufff4\135\ufff4\136\ufff4\001\002\000\014\121\uffd7\123" +
    "\051\124\047\125\046\126\050\001\002\000\032\121\ufff3" +
    "\122\ufff3\123\ufff3\124\ufff3\125\ufff3\126\ufff3\127\ufff3\130" +
    "\ufff3\133\ufff3\134\ufff3\135\ufff3\136\ufff3\001\002\000\010" +
    "\120\041\151\043\152\045\001\002\000\010\120\041\151" +
    "\043\152\045\001\002\000\010\120\041\151\043\152\045" +
    "\001\002\000\010\120\041\151\043\152\045\001\002\000" +
    "\004\121\053\001\002\000\004\122\054\001\002\000\022" +
    "\013\uffd6\043\uffd6\116\uffd6\141\uffd6\142\uffd6\144\uffd6\147" +
    "\uffd6\152\uffd6\001\002\000\032\121\ufff8\122\ufff8\123\ufff8" +
    "\124\ufff8\125\046\126\050\127\ufff8\130\ufff8\133\ufff8\134" +
    "\ufff8\135\ufff8\136\ufff8\001\002\000\032\121\ufff5\122\ufff5" +
    "\123\ufff5\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\133" +
    "\ufff5\134\ufff5\135\ufff5\136\ufff5\001\002\000\032\121\ufff7" +
    "\122\ufff7\123\ufff7\124\ufff7\125\046\126\050\127\ufff7\130" +
    "\ufff7\133\ufff7\134\ufff7\135\ufff7\136\ufff7\001\002\000\032" +
    "\121\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127" +
    "\ufff6\130\ufff6\133\ufff6\134\ufff6\135\ufff6\136\ufff6\001\002" +
    "\000\004\017\uffd5\001\002\000\004\017\063\001\002\000" +
    "\004\121\064\001\002\000\004\122\065\001\002\000\022" +
    "\013\uffd4\043\uffd4\116\uffd4\141\uffd4\142\uffd4\144\uffd4\147" +
    "\uffd4\152\uffd4\001\002\000\014\121\067\123\051\124\047" +
    "\125\046\126\050\001\002\000\032\121\ufff2\122\ufff2\123" +
    "\ufff2\124\ufff2\125\ufff2\126\ufff2\127\ufff2\130\ufff2\133\ufff2" +
    "\134\ufff2\135\ufff2\136\ufff2\001\002\000\010\120\uffea\151" +
    "\uffea\152\uffea\001\002\000\010\120\072\151\043\152\045" +
    "\001\002\000\010\120\072\151\043\152\045\001\002\000" +
    "\010\121\uffe9\135\107\136\106\001\002\000\022\123\051" +
    "\124\047\125\046\126\050\127\076\130\075\133\077\134" +
    "\100\001\002\000\010\120\041\151\043\152\045\001\002" +
    "\000\010\120\041\151\043\152\045\001\002\000\010\120" +
    "\041\151\043\152\045\001\002\000\010\120\041\151\043" +
    "\152\045\001\002\000\020\121\uffee\123\051\124\047\125" +
    "\046\126\050\135\uffee\136\uffee\001\002\000\020\121\uffef" +
    "\123\051\124\047\125\046\126\050\135\uffef\136\uffef\001" +
    "\002\000\020\121\uffec\123\051\124\047\125\046\126\050" +
    "\135\uffec\136\uffec\001\002\000\020\121\uffed\123\051\124" +
    "\047\125\046\126\050\135\uffed\136\uffed\001\002\000\004" +
    "\121\112\001\002\000\010\120\072\151\043\152\045\001" +
    "\002\000\010\120\072\151\043\152\045\001\002\000\010" +
    "\121\ufff1\135\ufff1\136\ufff1\001\002\000\010\121\ufff0\135" +
    "\ufff0\136\ufff0\001\002\000\004\140\113\001\002\000\020" +
    "\043\022\116\032\141\ufffb\142\030\144\021\147\035\152" +
    "\027\001\002\000\004\141\117\001\002\000\020\043\022" +
    "\116\032\141\ufffc\142\030\144\021\147\035\152\027\001" +
    "\002\000\022\013\ufffa\043\ufffa\116\ufffa\141\ufffa\142\ufffa" +
    "\144\ufffa\147\ufffa\152\ufffa\001\002\000\024\013\uffe8\043" +
    "\uffe8\116\uffe8\141\uffe8\142\uffe8\143\uffe8\144\uffe8\147\uffe8" +
    "\152\uffe8\001\002\000\024\013\uffe5\043\uffe5\116\uffe5\141" +
    "\uffe5\142\uffe5\143\122\144\uffe5\147\uffe5\152\uffe5\001\002" +
    "\000\022\013\uffe7\043\uffe7\116\uffe7\141\uffe7\142\uffe7\144" +
    "\uffe7\147\uffe7\152\uffe7\001\002\000\004\140\123\001\002" +
    "\000\020\043\022\116\032\141\ufffb\142\030\144\021\147" +
    "\035\152\027\001\002\000\004\141\125\001\002\000\022" +
    "\013\uffe6\043\uffe6\116\uffe6\141\uffe6\142\uffe6\144\uffe6\147" +
    "\uffe6\152\uffe6\001\002\000\010\121\130\135\107\136\106" +
    "\001\002\000\024\121\067\123\051\124\047\125\046\126" +
    "\050\127\076\130\075\133\077\134\100\001\002\000\010" +
    "\121\uffeb\135\uffeb\136\uffeb\001\002\000\004\137\132\001" +
    "\002\000\010\120\041\151\043\152\045\001\002\000\014" +
    "\122\134\123\051\124\047\125\046\126\050\001\002\000" +
    "\022\013\uffde\043\uffde\116\uffde\141\uffde\142\uffde\144\uffde" +
    "\147\uffde\152\uffde\001\002\000\004\013\136\001\002\000" +
    "\004\014\137\001\002\000\004\015\140\001\002\000\004" +
    "\002\ufffd\001\002\000\004\150\145\001\002\000\014\122" +
    "\uffdb\123\051\124\047\125\046\126\050\001\002\000\004" +
    "\122\144\001\002\000\022\013\uffda\043\uffda\116\uffda\141" +
    "\uffda\142\uffda\144\uffda\147\uffda\152\uffda\001\002\000\004" +
    "\017\uffd9\001\002\000\004\017\147\001\002\000\004\122" +
    "\150\001\002\000\022\013\uffd8\043\uffd8\116\uffd8\141\uffd8" +
    "\142\uffd8\144\uffd8\147\uffd8\152\uffd8\001\002\000\010\120" +
    "\uffe4\151\uffe4\152\uffe4\001\002\000\010\120\072\151\043" +
    "\152\045\001\002\000\010\121\uffe3\135\107\136\106\001" +
    "\002\000\004\121\155\001\002\000\004\140\156\001\002" +
    "\000\020\043\uffe2\116\uffe2\141\uffe2\142\uffe2\144\uffe2\147" +
    "\uffe2\152\uffe2\001\002\000\020\043\022\116\032\141\ufffb" +
    "\142\030\144\021\147\035\152\027\001\002\000\004\141" +
    "\uffe1\001\002\000\004\141\162\001\002\000\022\013\uffe0" +
    "\043\uffe0\116\uffe0\141\uffe0\142\uffe0\144\uffe0\147\uffe0\152" +
    "\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\006\002\004\021\003\001\001\000\004\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\025\005\030\012\024\014" +
    "\023\015\032\016\017\017\033\020\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\115\012\024\014\023\015\032\016\017\017\033\020" +
    "\022\022\134\001\001\000\004\032\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\043\001\001\000" +
    "\004\010\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\051\001\001\000\002\001\001\000\004\010" +
    "\057\001\001\000\004\010\056\001\001\000\004\010\055" +
    "\001\001\000\004\010\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\070\001\001\000\006\010\073\011\072" +
    "\001\001\000\006\010\126\011\125\001\001\000\004\024" +
    "\104\001\001\000\002\001\001\000\004\010\103\001\001" +
    "\000\004\010\102\001\001\000\004\010\101\001\001\000" +
    "\004\010\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\073\011\110\001\001\000\006\010\073\011\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\114\005\030\007\113\012\024\014\023" +
    "\015\032\016\017\017\033\020\022\001\001\000\002\001" +
    "\001\000\020\005\115\012\024\014\023\015\032\016\017" +
    "\017\033\020\022\001\001\000\002\001\001\000\004\025" +
    "\117\001\001\000\004\013\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\114\005\030\007\123\012" +
    "\024\014\023\015\032\016\017\017\033\020\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\151\001\001\000\006\010\073\011\152\001\001" +
    "\000\004\027\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\156\001\001\000\024\003\114\005\030" +
    "\007\157\012\024\014\023\015\032\016\017\017\033\020" +
    "\022\001\001\000\004\031\160\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	static String nombreFichero;

	//Inicia el parser

        public void comenzar(String texto){
            try {
                Yylex lexico = new Yylex(new FileReader(texto));
                nombreFichero = texto;
                new parser(lexico).parse();
            }
            catch (Exception e) {
                System.out.println("El fichero del programa no existe o no esta abierto");
            }
        }
        
	// Muestra el texto de un error
	public void report_error(String message) {
		System.err.println(message + "1");
                Interfaz.rotular(message + "1");
                try {
                    this.parse();
                } catch (Exception ex) {
                    System.out.println("Error");
                }
	}

	// Muestra un error de sintaxis
	public void syntax_error(Symbol actual) {
		if (actual.sym == sym.EOF){
			Interfaz.rotular("Intruccion incompleta en linea : "+InformacionCodigo.linea+ " Token : "+InformacionCodigo.token);
                }
		else    {
			Interfaz.rotular("Error sintactico en linea : "+InformacionCodigo.linea+ " Token : "+InformacionCodigo.token);
                }
        }


	// Muestra el texto de un error irrecuperable
	public void report_fatal_error(String message, Object info) {
		System.err.println(message + "2");
                Interfaz.rotular(message + "2");
	}

	// Muestra un mensaje cuando no se puede seguir analizando
	public void unrecovered_syntax_error(Symbol actual) {
	}

	//Muestra un mensaje de error con linea, token y mensaje
	public void error(String mensaje) {
                report_error("ERROR -> Linea: "+InformacionCodigo.linea+" Lexema: "+InformacionCodigo.token+" "+mensaje);
                try {
                    this.parse();
                } catch (Exception ex) {
                    System.out.println("Error");
                }
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	Tabla tabla;
	int cuentaWhiles;
	int cuentaDirecciones;
	CodigoIntermedio codigoIntermedio;
	int cuentaIf;
	Pila pilaIf;
	int cuentaBucle;
	Pila pilaBucle;
	int cuentaCadenas;
	Lista listaCadenas;

        void entre(){
            JOptionPane.showMessageDialog(null, "Inicializando");
        }

	void inicializar() {
		tabla = new Tabla();
		cuentaWhiles = 0;
		cuentaDirecciones = 9999;
		cuentaIf = 0;
		pilaIf = new Pila();
		cuentaBucle = 0;
		pilaBucle = new Pila();
		cuentaCadenas = 0;
		listaCadenas = new Lista();
		String nombre = parser.nombreFichero.substring(0,parser.nombreFichero.lastIndexOf("."));
		codigoIntermedio = new CodigoIntermedio(nombre + ".ci");
		try {
			codigoIntermedio.abrirFicheroEscritura();
		} catch (IOException e) {
			System.out.println(Textos.ficheroCiNoExiste);
                        Interfaz.rotular(Textos.ficheroCiNoExiste);
			codigoIntermedio.cerrarFicheroEscritura();
		}
	}

	boolean existeSimbolo(String id) {
		return tabla.existeSimbolo(id);
	}

	void addSimbolo(String id) {
		tabla.addSimbolo(id);
	}

	void setDireccionSimbolo(String id,int dir) {
		tabla.setDireccionSimbolo(id,dir);
	}

	Expresion suma(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("SUMAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion resta(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("RESTAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion producto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("MULTIPLICAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion division(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("DIVIDIR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}



	Expresion entero(String e) {
		cuentaDirecciones++;
		codigoIntermedio.guardarTripleta(new Tripleta("CARGAR_VALOR",
								e,
								null,
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion identificador(String id) {
		cuentaDirecciones++;
		codigoIntermedio.guardarTripleta(new Tripleta("CARGAR_DIRECCION",
								String.valueOf((tabla.getSimbolo(id)).getDireccion()),
								null,
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion or(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("OR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion and(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("AND",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion mayor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("MAYOR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion menor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("MENOR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

        Expresion igual(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("IGUAL",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion distinto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarTripleta(new Tripleta("DISTINTO",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	void asignacion(String id,Expresion e) {
		codigoIntermedio.guardarTripleta(new Tripleta("CARGAR_DIRECCION",
								String.valueOf(e.getDireccion()),
								null,
								String.valueOf((tabla.getSimbolo(id)).getDireccion())));
	}

	void cerrarCI() {
		codigoIntermedio.cerrarFicheroEscritura();
	}

	void condicion(Expresion e,int n) {
		codigoIntermedio.guardarTripleta(new Tripleta("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"ELSE_"+String.valueOf(n)));
	}

	void saltarEtiqueta(String eti,int n) {
		codigoIntermedio.guardarTripleta(new Tripleta("SALTAR_ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void ponerEtiqueta(String eti,int n) {
		codigoIntermedio.guardarTripleta(new Tripleta("ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void condicion2(Expresion e,int n) {
		codigoIntermedio.guardarTripleta(new Tripleta("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"FINBUCLE_"+String.valueOf(n)));
	}

	void imprimirW(Expresion e) {
		codigoIntermedio.guardarTripleta(new Tripleta("IMPRIMIR_ENTERO",
					String.valueOf(e.getDireccion()),
					null,
					null));
	}

	void imprimirS(String c,int cuenta) {
		listaCadenas.addCadena(c);
		codigoIntermedio.guardarTripleta(new Tripleta("IMPRIMIR_CADENA",
					"CADENA_"+String.valueOf(cuenta),
					null,
					null));
	}

	void generarCadenas() {
		for(int i=0;i<listaCadenas.size();i++) {
			codigoIntermedio.guardarTripleta(new Tripleta("PONER_CADENA",
					"CADENA_"+String.valueOf(i+1),
					null,
					listaCadenas.getCadena(i)));
		}
	}

	void generarCF() {
		CodigoFinal codigoFinal = new CodigoFinal(codigoIntermedio,parser.nombreFichero);
		try {
			codigoFinal.traducirCodigo();
		} catch(Exception e) {}
	}

	void finPrograma() {
		codigoIntermedio.guardarTripleta(new Tripleta("FIN",null,null,null));
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruccion ::= SentBreak 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instruccion ::= SentPrint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instruccion ::= SentEcho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instruccion ::= SentAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruccion ::= SentWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruccion ::= SentIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SentPrint ::= PRINT ABRIRPAR COMILLA STRING NT$14 COMILLA CERRARPAR PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentPrint",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$14 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				cuentaCadenas++;
				imprimirS(c,cuentaCadenas);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SentPrint ::= PRINT ABRIRPAR Expresion NT$13 CERRARPAR PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentPrint",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$13 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                    imprimirW(e);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SentEcho ::= ECHO COMILLA STRING NT$12 COMILLA PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentEcho",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$12 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				cuentaCadenas++;
				imprimirS(c,cuentaCadenas);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SentEcho ::= ECHO Expresion NT$11 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentEcho",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                    imprimirW(e);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SentBreak ::= BREAK NT$10 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentBreak",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$10 ::= 
            {
              Object RESULT =null;

				if(cuentaWhiles>0) {
				} else {
					parser.error(Textos.breakSinWhile);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SentAsignacion ::= VARIABLE NT$9 ASIGNACION Expresion PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					asignacion(id,e);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentAsignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

					if(existeSimbolo(id)) {
					parser.error(Textos.simboloRedeclarado);
				} else {
					addSimbolo(id);
					cuentaDirecciones++;
					setDireccionSimbolo(id,cuentaDirecciones);
				}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SentWhile ::= WHILE ABRIRPAR NT$5 Condicion NT$6 CERRARPAR ABRIRLLA NT$7 BloqueSentencias NT$8 CERRARLLA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
				saltarEtiqueta("BUCLE",pilaBucle.verCima());
				ponerEtiqueta("FINBUCLE",pilaBucle.verCima());
				pilaBucle.desapilar();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentWhile",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

				cuentaWhiles--;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

				cuentaWhiles++;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				condicion2(c,pilaBucle.verCima());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;

				cuentaBucle++;
				pilaBucle.apilar(cuentaBucle);
				ponerEtiqueta("BUCLE",pilaBucle.verCima());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SentElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentElse",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentElse ::= ELSE ABRIRLLA BloqueSentencias CERRARLLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentElse",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SentIf ::= IF ABRIRPAR NT$2 Condicion NT$3 CERRARPAR ABRIRLLA BloqueSentencias CERRARLLA NT$4 SentElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
				ponerEtiqueta("FINIF",pilaIf.verCima());
				pilaIf.desapilar();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

				saltarEtiqueta("FINIF",pilaIf.verCima());
				ponerEtiqueta("ELSE",pilaIf.verCima());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				condicion(c,pilaIf.verCima());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Object RESULT =null;

				cuentaIf++;
				pilaIf.apilar(cuentaIf);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Condicion ::= ABRIRPAR Condicion CERRARPAR 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=c;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Condicion ::= Expresion MENQUE Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=menor(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Condicion ::= Expresion MAYQUE Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=mayor(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Condicion ::= Expresion DIFERENTE Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=distinto(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Condicion ::= Expresion IGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=igual(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Condicion ::= Condicion ANDBOOLEANO Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=and(c1,c2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Condicion ::= Condicion ORBOOLEANO Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=or(c1,c2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= ABRIRPAR Expresion CERRARPAR 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= VARIABLE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                if(existeSimbolo(id)) {
					RESULT=identificador(id);
				} else {
					parser.error(Textos.simboloNoDeclarado);
					RESULT=identificador(null);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= INT 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=entero(e);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expresion ::= Expresion SLASH Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=division(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expresion ::= Expresion MULTIPLICACION Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=producto(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expresion ::= Expresion RESTA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=resta(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expresion ::= Expresion SUMA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=suma(e1,e2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instrucciones ::= Instrucciones Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueSentencias ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueSentencias ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cuerpo ::= ABRIR_HTML ABRE_HEAD ABRE_TITLE STRING CIERRA_TITLE CIERRA_HEAD ABRE_BODY ABRE_PHP Instrucciones NT$1 CIERRA_PHP CIERRA_BODY CIERRA_HTML 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 
                    finPrograma();
                    generarCadenas();
                    cerrarCI(); 
                    generarCF();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= NT$0 Cuerpo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

                    inicializar();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

