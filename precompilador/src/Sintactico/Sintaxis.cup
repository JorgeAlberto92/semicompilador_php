package Sintactico;
/*--------------------Imports--------------------*/
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import phpmorita.*;

/*-------------------Codigo de acciones-------------------*/
action code {:
    void print(String msj)
    {System.out.println(msj);}
:}

/*-----Codigo del parser, para acceder a un objeto que se genera durante la etapa del parsing-----*/
parser code {:
    
    public void syntax_error(Symbol cur_token) {
        token t = (token) cur_token.value;
        System.out.println("Error sintáctico cerca de \"" + t.getCadena() + "\" : [" + t.getRow() + " : " + t.getCol() + "]");
        Interfaz.rotular("Error sintáctico cerca de \"" + t.getCadena() + "\" : [" + t.getRow() + " : " + t.getCol() + "]");
        if (t.getCadena().isEmpty()) {
            Interfaz.rotular("El análisis a finalizado");
        } else {
            try {
                this.parse();
            } catch (Exception ex) {
                System.out.println("Error");
            }
        }
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        Interfaz.rotular("Error, Ya no se recupera");
        System.out.println("Error, Ya no se recupera");
    }
    
    public void semantic(Symbol cur_token,String n) {
        System.out.println("Error semántico");
    }

    public void semantic(String msg, Object obj) {

    }
:}



/*------------------------------Símbolos Terminales------------------------------*/

terminal    ABRIR_HTML, ABRE_HEAD, ABRE_TITLE, CIERRA_TITLE, CIERRA_HEAD, ABRE_BODY, ABRE_PHP, CIERRA_PHP, CIERRA_BODY, CIERRA_HTML;
terminal    GBAJO, COMILLA, COMA, ANDEQUAL, DECLARA, NOT, DOSPUNTOS, INTERROGACION, AND, ARRAY, AS, CALLABLE, CASE, CATCH, CLONE, CONST, 
            CONTINUE, DECLARE, DEFAULT, DIE, DO, ECHO, EMPTY, ENDDECLARE, ENDFOR, ENDFOREACH, ENDIF, ENDSWITCH, ENDWHILE, EVAL, EXIT, EXTENDS, 
            FINAL, FOREACH, FUNCTION, GLOBAL, GOTO, IMPLEMENTS, INCLUDE, INCLUDE_ONCE, INSTANCEOF, INSTEADOF, INTERFACE, ISSET, LIST, OR, PROTECTED, PUBLIC, REQUIRE, REQUIRE_ONCE, 
            RETURN, STATIC, SWITCH, THROW, TRAIT, TRY, UNSET, USE, VAR, XOR, YIELD, HALTCOM, ABSTRACT, CLASS, PRINT, PUNTO;
terminal    ABRIRPAR, CERRARPAR, PCOMA, SUMA, RESTA, MULTIPLICACION, SLASH, MENQUE, MAYQUE, MENIGU, MAYIGU, IGUAL, DIFERENTE; 
terminal    ORBOOLEANO, ANDBOOLEANO, ASIGNACION, ABRIRLLA, CERRARLLA, IF, ELSE, WHILE, ELSEIF, FOR; 
terminal    BREAK;
terminal    String STRING;
terminal    String INT;
terminal    String VARIABLE;

/*-----------------------------Símbolos No Terminales-----------------------------*/

non terminal Programa, Instrucciones, Cuerpo;
non terminal Instruccion;
non terminal Declaracion;
non terminal BloqueSentencias;
non terminal Expresion;
non terminal Condicion;
non terminal SentIf, SentElse;
non terminal SentWhile;
non terminal SentAsignacion;
non terminal SentEcho, SentPrint;
non terminal SentBreak;

/*----------------------------Precedencia de Operadores----------------------------*/

precedence left ASIGNACION;
precedence left ORBOOLEANO, ANDBOOLEANO;
precedence left IGUAL, DIFERENTE, MAYQUE, MENQUE;     
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, SLASH;
precedence left ABRIRPAR, CERRARPAR;
precedence left ELSE;

/*-----------------------------------Gramáticas-----------------------------------*/
start with Programa;

/*-----------------------ESTRUCTURA DE PROGRAMA---------------------------*/
Programa ::= Cuerpo;

/*--------------------DEFINICION DE INSTRUCCIONES-------------------------*/

Cuerpo ::= ABRIR_HTML ABRE_HEAD ABRE_TITLE STRING CIERRA_TITLE CIERRA_HEAD ABRE_BODY ABRE_PHP Instrucciones CIERRA_PHP CIERRA_BODY CIERRA_HTML;

BloqueSentencias ::= Instrucciones |;

Instrucciones ::= Instrucciones Instruccion | Instruccion;

Expresion ::=   Expresion SUMA Expresion | Expresion RESTA Expresion | Expresion MULTIPLICACION Expresion | Expresion SLASH Expresion | INT | VARIABLE | ABRIRPAR Expresion CERRARPAR;

Condicion ::=   Condicion ORBOOLEANO Condicion | Condicion ANDBOOLEANO Condicion | Expresion IGUAL Expresion | Expresion DIFERENTE Expresion | Expresion MAYQUE Expresion | Expresion MENQUE Expresion | ABRIRPAR Condicion CERRARPAR;

SentIf ::=  IF ABRIRPAR Condicion CERRARPAR ABRIRLLA BloqueSentencias CERRARLLA 
			
	    SentElse;

SentElse ::= ELSE ABRIRLLA BloqueSentencias CERRARLLA |;

SentWhile ::= WHILE ABRIRPAR Condicion CERRARPAR ABRIRLLA BloqueSentencias CERRARLLA;

SentAsignacion ::= VARIABLE ASIGNACION Expresion PCOMA;

SentBreak ::= BREAK PCOMA;

SentEcho ::=    ECHO Expresion PCOMA
                |
                ECHO COMILLA STRING COMILLA PCOMA
                ;

SentPrint::=    PRINT ABRIRPAR Expresion CERRARPAR PCOMA
                |
                PRINT ABRIRPAR COMILLA STRING COMILLA CERRARPAR PCOMA
                ;

Instruccion ::=   SentIf |
		  SentWhile |
		  SentAsignacion |
                  SentEcho |
                  SentPrint |
		  SentBreak;