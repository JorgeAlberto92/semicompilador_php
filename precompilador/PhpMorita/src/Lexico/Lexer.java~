/* The following code was generated by JFlex 1.4.3 on 28/05/14 08:03 PM */

package Lexico;
import static Lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/05/14 08:03 PM from the specification file
 * <tt>src/Lexico/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\0\1\1\22\0\1\1\1\42\2\0"+
    "\1\6\1\0\1\40\1\27\1\35\1\36\1\24\1\37\1\32\1\4"+
    "\1\43\1\5\12\3\1\31\1\30\1\7\1\25\1\10\1\44\1\0"+
    "\3\2\1\2\7\2\1\2\16\2\4\0\1\26\1\0\1\16\1\21"+
    "\1\45\1\17\1\15\1\54\1\60\1\11\1\20\1\2\1\52\1\14"+
    "\1\13\1\51\1\22\1\46\1\61\1\47\1\50\1\12\1\53\1\56"+
    "\1\55\1\57\1\23\1\2\1\33\1\41\1\34\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\1\1\5\1\6\1\7"+
    "\1\10\1\11\11\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\2"+
    "\1\26\1\27\1\30\12\4\1\31\4\0\1\32\1\0"+
    "\1\33\13\4\1\34\3\4\1\35\3\4\1\36\1\4"+
    "\1\37\1\4\1\40\1\4\1\41\1\42\1\43\1\44"+
    "\22\4\10\0\2\4\1\45\12\4\1\46\2\4\1\47"+
    "\25\4\1\50\2\4\1\51\2\4\1\52\1\53\2\4"+
    "\11\0\2\4\1\54\1\4\1\55\1\56\5\4\1\57"+
    "\1\4\1\60\20\4\1\61\17\4\1\62\10\0\1\63"+
    "\1\64\1\65\1\66\2\4\1\67\5\4\1\70\3\4"+
    "\1\71\4\4\1\72\1\73\1\4\1\74\1\75\1\76"+
    "\2\4\1\77\1\100\6\4\1\101\1\102\2\4\1\103"+
    "\1\4\4\0\1\104\1\105\1\0\1\106\1\107\2\4"+
    "\1\110\16\4\1\111\1\112\1\4\1\113\1\114\2\4"+
    "\1\115\1\116\1\117\1\0\1\120\1\121\4\4\1\122"+
    "\1\4\1\123\1\124\2\4\1\125\6\4\1\126\1\127"+
    "\1\4\1\130\3\4\1\131\1\132\6\4\1\133\1\134"+
    "\2\4\1\135\1\4\1\136\2\4\1\137\1\4\1\140"+
    "\2\4\1\141\1\4\1\142\1\143\1\144\1\4\1\145"+
    "\5\4\1\146\1\4\1\147\3\4\2\0\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\226\0\62\0\310"+
    "\0\372\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\62\0\u0320\0\u0352\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\226\0\u0384"+
    "\0\u03b6\0\62\0\62\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\62\0\u0708\0\62\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\144\0\u0960\0\u0992\0\u09c4\0\144\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\144\0\u0a8c\0\144\0\u0abe\0\62\0\u0af0\0\62"+
    "\0\62\0\62\0\62\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\144"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\144\0\u128e\0\u12c0\0\144\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\144\0\u170c\0\u173e\0\u1770\0\u17a2"+
    "\0\u17d4\0\144\0\144\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce"+
    "\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\144\0\u1a90\0\u1ac2\0\144\0\u1af4\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1bbc\0\144\0\u1bee\0\144\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\144\0\u1f40\0\u1f72\0\u1fa4"+
    "\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134"+
    "\0\u2166\0\u2198\0\u21ca\0\u21fc\0\144\0\u222e\0\u2260\0\u2292"+
    "\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\62\0\144\0\144"+
    "\0\144\0\u23be\0\u23f0\0\144\0\u2422\0\u2454\0\u2486\0\u24b8"+
    "\0\u24ea\0\144\0\u251c\0\u254e\0\u2580\0\144\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\144\0\144\0\u267a\0\144\0\144\0\144"+
    "\0\u26ac\0\u26de\0\144\0\144\0\u2710\0\u2742\0\u2774\0\u27a6"+
    "\0\u27d8\0\u280a\0\144\0\144\0\u283c\0\u286e\0\144\0\u28a0"+
    "\0\u28d2\0\u2904\0\u2936\0\u2968\0\62\0\62\0\u299a\0\62"+
    "\0\144\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8"+
    "\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88"+
    "\0\u2cba\0\u2cec\0\144\0\144\0\u2d1e\0\144\0\144\0\u2d50"+
    "\0\u2d82\0\144\0\62\0\62\0\u2db4\0\62\0\62\0\u2de6"+
    "\0\u2e18\0\u2e4a\0\u2e7c\0\144\0\u2eae\0\144\0\144\0\u2ee0"+
    "\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070"+
    "\0\u30a2\0\144\0\u30d4\0\62\0\u3106\0\u3138\0\u316a\0\144"+
    "\0\144\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\144"+
    "\0\144\0\u32c8\0\u32fa\0\144\0\u332c\0\144\0\u335e\0\u3390"+
    "\0\144\0\u33c2\0\144\0\u33f4\0\u3426\0\144\0\u3458\0\144"+
    "\0\144\0\144\0\u348a\0\144\0\u34bc\0\u34ee\0\u3520\0\u3552"+
    "\0\u3584\0\144\0\u35b6\0\144\0\u35e8\0\u361a\0\u364c\0\u367e"+
    "\0\u36b0\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\4\1\13\1\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\4\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\4\64\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\15\4\3\0\1\5\60\0\1\57\6\0\13\57\2\0"+
    "\1\57\16\0\15\57\5\0\1\60\3\0\1\61\1\62"+
    "\6\0\1\63\3\0\1\64\16\0\1\65\42\0\1\66"+
    "\36\0\2\4\5\0\1\67\12\4\2\0\1\4\16\0"+
    "\2\4\1\70\12\4\2\0\2\4\5\0\7\4\1\71"+
    "\3\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\2\4\1\72\1\73\7\4\2\0\1\4\16\0\1\74"+
    "\3\4\1\75\4\4\1\76\1\77\2\4\2\0\2\4"+
    "\5\0\10\4\1\100\2\4\2\0\1\4\16\0\2\4"+
    "\1\101\1\102\1\103\10\4\2\0\2\4\5\0\4\4"+
    "\1\104\2\4\1\105\1\4\1\106\1\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\2\4\1\107\10\4"+
    "\2\0\1\4\16\0\3\4\1\110\1\111\2\4\1\112"+
    "\5\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\2\4\1\113\12\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\2\4\1\114\12\4\2\0\2\4\5\0"+
    "\7\4\1\115\3\4\2\0\1\4\16\0\15\4\25\0"+
    "\1\116\36\0\2\4\5\0\13\4\2\0\1\117\16\0"+
    "\15\4\25\0\1\120\12\0\1\121\62\0\1\122\30\0"+
    "\1\123\53\0\2\4\5\0\3\4\1\124\1\4\1\125"+
    "\3\4\1\126\1\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\2\4\1\127"+
    "\3\4\1\130\6\4\2\0\2\4\5\0\4\4\1\131"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\1\4\1\132\11\4\2\0\1\4\16\0\10\4\1\133"+
    "\4\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\3\4\1\134\1\135\10\4\2\0\2\4\5\0\7\4"+
    "\1\136\1\4\1\137\1\4\2\0\1\4\16\0\6\4"+
    "\1\140\6\4\2\0\2\4\5\0\1\141\12\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\5\4\1\142"+
    "\5\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\11\4\1\143\1\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\3\4\1\144\5\4\1\145\1\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\57\5\0\13\57\2\0"+
    "\1\57\16\0\15\57\11\0\1\146\1\147\6\0\1\150"+
    "\52\0\1\151\2\0\1\152\64\0\1\153\63\0\1\154"+
    "\105\0\1\155\15\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\2\4\1\156\12\4\2\0\2\4\5\0\5\4"+
    "\1\157\4\4\1\160\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\3\4\1\161"+
    "\11\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\1\4\1\162\13\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\3\4\1\163\11\4\2\0\2\4\5\0"+
    "\1\164\12\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\6\4\1\165\4\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\5\4\1\166\5\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\1\4\1\167\5\4"+
    "\1\170\3\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\13\4\2\0\1\4\16\0\3\4\1\171\11\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\4\16\0\2\4"+
    "\1\172\12\4\2\0\2\4\5\0\6\4\1\173\4\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\4\16\0\1\174\6\4\1\175\5\4\2\0"+
    "\2\4\5\0\4\4\1\176\6\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\1\4\1\177\13\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\3\4\1\200\11\4\2\0\2\4\5\0"+
    "\1\4\1\201\11\4\2\0\1\4\16\0\1\202\2\4"+
    "\1\203\11\4\2\0\2\4\5\0\4\4\1\204\6\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\4\4"+
    "\1\205\6\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\1\206\12\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\5\4\1\207\3\4\1\210\1\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\1\4\1\211"+
    "\1\4\1\212\7\4\2\0\1\4\16\0\3\4\1\213"+
    "\11\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\4\4\1\214\10\4\2\0\2\4\5\0\7\4\1\215"+
    "\1\4\1\216\1\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\10\4\1\217\2\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\1\4\1\220\11\4\2\0"+
    "\1\4\16\0\14\4\1\221\2\0\2\4\5\0\5\4"+
    "\1\222\5\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\7\4\1\223\3\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\4\4\1\224\6\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\3\4\1\225\11\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\4\16\0\4\4\1\226\10\4\2\0\2\4"+
    "\5\0\13\4\2\0\1\4\16\0\2\4\1\227\12\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\4\16\0\4\4"+
    "\1\230\10\4\2\0\2\4\5\0\7\4\1\231\3\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\4\16\0\2\4\1\232\12\4\2\0\2\4"+
    "\5\0\13\4\2\0\1\4\16\0\2\4\1\233\12\4"+
    "\2\0\2\4\5\0\11\4\1\234\1\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\1\4\1\235\11\4"+
    "\2\0\1\4\16\0\15\4\12\0\1\236\2\0\1\237"+
    "\64\0\1\240\63\0\1\241\52\0\1\242\64\0\1\243"+
    "\55\0\1\244\66\0\1\245\53\0\1\246\52\0\2\4"+
    "\5\0\11\4\1\247\1\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\7\4\1\250\3\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\1\4\1\251\11\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\1\4"+
    "\1\252\11\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\4\4\1\253\6\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\11\4\1\254\1\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\6\4\1\255\1\256"+
    "\3\4\2\0\1\4\16\0\3\4\1\257\3\4\1\260"+
    "\1\261\4\4\2\0\2\4\5\0\3\4\1\262\7\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\4\4"+
    "\1\263\6\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\1\4\1\264\11\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\1\4\1\265\11\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\5\4\1\266\5\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\3\4"+
    "\1\267\7\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\5\4\1\270\5\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\3\4\1\271\7\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\4\4\1\272\6\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\4\4"+
    "\1\273\6\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\3\4\1\274\7\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\1\4\1\275\11\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\5\4\1\276\5\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\3\4"+
    "\1\277\7\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\5\4\1\300\5\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\4\16\0\3\4"+
    "\1\301\11\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\4\4\1\302\10\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\4\16\0\1\303\14\4\2\0\2\4\5\0"+
    "\3\4\1\304\7\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\4\4\1\305\6\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\1\4\1\306\11\4\2\0"+
    "\1\4\16\0\3\4\1\307\11\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\4\4\1\310\10\4\2\0"+
    "\2\4\5\0\1\4\1\311\11\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\3\4\1\312\7\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\6\4\1\313\6\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\6\4\1\314\6\4\2\0"+
    "\2\4\5\0\1\4\1\315\11\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\1\4\1\316\11\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\4\4\1\317"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\5\4\1\320\5\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\4\4\1\321\6\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\1\322\14\4\2\0\2\4\5\0\3\4\1\323\7\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\10\4"+
    "\1\324\2\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\11\4\1\325\1\4\2\0\1\4\16\0\15\4"+
    "\13\0\1\326\64\0\1\327\55\0\1\330\66\0\1\331"+
    "\56\0\1\332\64\0\1\333\56\0\1\334\70\0\1\335"+
    "\104\0\1\336\15\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\10\4\1\337\4\4\2\0\2\4\5\0\1\4"+
    "\1\340\11\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\12\4\1\341\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\7\4\1\342\3\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\4\4\1\343\6\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\7\4\1\344\5\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\10\4\1\345\4\4\2\0"+
    "\2\4\5\0\11\4\1\346\1\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\1\347\12\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\4\4\1\350\10\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\4\16\0\2\4\1\351\12\4\2\0\2\4"+
    "\5\0\12\4\1\352\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\5\4\1\353\5\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\6\4\1\354\6\4\2\0\2\4\5\0\4\4\1\355"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\1\4\1\356\11\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\2\4\1\357"+
    "\12\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\6\4\1\360\6\4\2\0\2\4\5\0\4\4\1\361"+
    "\1\362\5\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\13\4\2\0\1\4\16\0\5\4\1\363\7\4"+
    "\2\0\2\4\5\0\6\4\1\364\4\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\3\4\1\365\7\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\4\16\0\3\4\1\366\11\4\2\0\2\4"+
    "\5\0\4\4\1\367\6\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\1\370\12\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\5\4\1\371\5\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\7\4\1\372"+
    "\3\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\1\4\1\373\11\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\1\4\1\374\11\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\4\4\1\375\6\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\7\4\1\376"+
    "\3\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\2\4\1\377\12\4\2\0"+
    "\2\4\5\0\7\4\1\u0100\3\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\7\4\1\u0101\3\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\1\u0102\14\4\2\0\2\4\5\0\1\4"+
    "\1\u0103\11\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\3\4\1\u0104\7\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\5\4\1\u0105\5\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\1\4\1\u0106\11\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\4\4"+
    "\1\u0107\6\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\5\4\1\u0108\5\4\2\0\1\4\16\0\15\4"+
    "\14\0\1\u0109\64\0\1\u010a\56\0\1\u010b\70\0\1\u010c"+
    "\46\0\1\u010d\61\0\1\u010e\66\0\1\u010f\54\0\1\u0110"+
    "\53\0\2\4\5\0\13\4\2\0\1\4\16\0\7\4"+
    "\1\u0111\5\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\1\u0112\14\4\2\0\2\4\5\0\7\4\1\u0113"+
    "\3\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\2\4\1\u0114\12\4\2\0"+
    "\2\4\5\0\7\4\1\u0115\3\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\6\4\1\u0116\4\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\5\4\1\u0117"+
    "\5\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\2\4\1\u0118\12\4\2\0"+
    "\2\4\5\0\3\4\1\u0119\7\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\2\4\1\u011a\10\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\7\4\1\u011b\5\4\2\0\2\4\5\0"+
    "\6\4\1\u011c\4\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\5\4\1\u011d\5\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\4\4\1\u011e\10\4\2\0\2\4\5\0\1\4\1\u011f"+
    "\11\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\10\4\1\u0120\2\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\4\4\1\u0121"+
    "\10\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\1\u0122\14\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\1\u0123\14\4\2\0\2\4\5\0\13\4\2\0"+
    "\1\4\16\0\4\4\1\u0124\10\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\2\4\1\u0125\12\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\1\u0126\14\4"+
    "\2\0\2\4\5\0\1\u0127\12\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\1\u0128\14\4\2\0\2\4\5\0\7\4\1\u0129\3\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\3\4"+
    "\1\u012a\7\4\2\0\1\4\16\0\15\4\10\0\1\u012b"+
    "\61\0\1\u012c\66\0\1\u012d\54\0\1\u012e\61\0\1\u012f"+
    "\53\0\2\4\5\0\3\4\1\u0130\7\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\1\4\1\u0131\11\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\4\4"+
    "\1\u0132\6\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\3\4\1\u0133\7\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\4\16\0\3\4"+
    "\1\u0134\11\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\1\u0135\14\4\2\0\2\4\5\0\4\4\1\u0136"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\1\4\1\u0137\11\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\4\4\1\u0138\6\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\5\4\1\u0139\5\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\4\4\1\u013a"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\6\4\1\u013b\4\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\1\u013c\14\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\u013d\16\0\15\4"+
    "\2\0\2\4\5\0\3\4\1\u013e\7\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\6\4\1\u013f\6\4\2\0\2\4\5\0\1\4"+
    "\1\u0140\11\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\4\4\1\u0141\6\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\1\u0142\12\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\11\4\1\u0143\1\4\2\0"+
    "\1\4\16\0\15\4\10\0\1\u0144\53\0\2\4\5\0"+
    "\5\4\1\u0145\5\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\1\u0146\14\4"+
    "\2\0\2\4\5\0\5\4\1\u0147\5\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\4\4\1\u0148\6\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\1\4"+
    "\1\u0149\11\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\13\4\2\0\1\4\16\0\4\4\1\u014a\10\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\4\16\0\1\u014b"+
    "\14\4\2\0\2\4\5\0\13\4\2\0\1\u014c\16\0"+
    "\15\4\2\0\2\4\5\0\11\4\1\u014d\1\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\4\4\1\u014e"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\1\u014f\14\4\2\0\2\4"+
    "\5\0\4\4\1\u0150\6\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\4\4\1\u0151\6\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\4\4\1\u0152\6\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\u0153\16\0\15\4\2\0\2\4\5\0\13\4"+
    "\2\0\1\4\16\0\4\4\1\u0154\10\4\2\0\2\4"+
    "\5\0\13\4\2\0\1\4\16\0\2\4\1\u0155\12\4"+
    "\2\0\2\4\5\0\1\u0156\12\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\1\u0157\14\4\2\0\2\4\5\0\1\4\1\u0158\11\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\4\4"+
    "\1\u0159\6\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\11\4\1\u015a\1\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\4\16\0\7\4"+
    "\1\u015b\5\4\2\0\2\4\5\0\11\4\1\u015c\1\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\11\4"+
    "\1\u015d\1\4\2\0\1\4\16\0\15\4\2\0\2\4"+
    "\5\0\6\4\1\u015e\4\4\2\0\1\4\16\0\15\4"+
    "\2\0\2\4\5\0\11\4\1\u015f\1\4\2\0\1\4"+
    "\16\0\15\4\2\0\2\4\5\0\4\4\1\u0160\6\4"+
    "\2\0\1\4\16\0\15\4\2\0\2\4\5\0\1\u0161"+
    "\12\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\3\4\1\u0162\11\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\4\4\1\u0163"+
    "\10\4\2\0\2\4\5\0\13\4\2\0\1\4\16\0"+
    "\7\4\1\u0164\5\4\2\0\2\4\5\0\2\4\1\u0165"+
    "\10\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\4\4\1\u0166\10\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\16\0\1\u0167\14\4"+
    "\2\0\2\4\5\0\13\4\2\0\1\4\16\0\1\4"+
    "\1\u0168\13\4\2\0\2\4\5\0\13\4\2\0\1\4"+
    "\16\0\1\u0169\14\4\2\0\2\4\5\0\4\4\1\u016a"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\7\4\1\u016b\3\4\2\0\1\4\16\0\15\4\2\0"+
    "\2\4\5\0\4\4\1\u016c\6\4\2\0\1\4\16\0"+
    "\15\4\2\0\2\4\5\0\3\4\1\u016d\7\4\2\0"+
    "\1\4\16\0\15\4\2\0\2\4\5\0\4\4\1\u016e"+
    "\6\4\2\0\1\4\16\0\15\4\2\0\2\4\5\0"+
    "\13\4\2\0\1\4\16\0\2\4\1\u016f\12\4\2\0"+
    "\2\4\5\0\13\4\2\0\1\4\6\0\1\u0170\7\0"+
    "\15\4\36\0\1\u0171\53\0\1\u0172\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\3\1\1\11\14\1\1\11\2\1\10\11"+
    "\3\1\2\11\14\1\4\0\1\11\1\0\1\11\27\1"+
    "\1\11\1\1\4\11\22\1\10\0\60\1\11\0\57\1"+
    "\10\0\1\11\52\1\4\0\2\11\1\0\1\11\32\1"+
    "\2\11\1\0\2\11\24\1\1\11\53\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { lexeme=yytext(); return AND_IGUAL;
          }
        case 105: break;
        case 65: 
          { lexeme=yytext(); return UNSET;
          }
        case 106: break;
        case 37: 
          { lexeme=yytext(); return TRY;
          }
        case 107: break;
        case 28: 
          { lexeme=yytext(); return AS;
          }
        case 108: break;
        case 38: 
          { lexeme=yytext(); return AND;
          }
        case 109: break;
        case 90: 
          { lexeme=yytext(); return ABSTRACT;
          }
        case 110: break;
        case 13: 
          { lexeme=yytext(); return COMILLA;
          }
        case 111: break;
        case 12: 
          { lexeme=yytext(); return GUIONBAJO;
          }
        case 112: break;
        case 19: 
          { lexeme=yytext(); return PARENTESIS_ABRE;
          }
        case 113: break;
        case 23: 
          { lexeme=yytext(); return PUNTO;
          }
        case 114: break;
        case 97: 
          { lexeme=yytext(); return PROTECTED;
          }
        case 115: break;
        case 39: 
          { lexeme=yytext(); return DIE;
          }
        case 116: break;
        case 83: 
          { lexeme=yytext(); return DECLARE;
          }
        case 117: break;
        case 52: 
          { lexeme=yytext(); return THROW;
          }
        case 118: break;
        case 74: 
          { lexeme=yytext(); return RETURN;
          }
        case 119: break;
        case 73: 
          { lexeme=yytext(); return PUBLIC;
          }
        case 120: break;
        case 47: 
          { lexeme=yytext(); return EVAL;
          }
        case 121: break;
        case 57: 
          { lexeme=yytext(); return ISSET;
          }
        case 122: break;
        case 20: 
          { lexeme=yytext(); return PARENTESIS_CIERRA;
          }
        case 123: break;
        case 76: 
          { lexeme=yytext(); return SWITCH;
          }
        case 124: break;
        case 55: 
          { lexeme=yytext(); return ENDIF;
          }
        case 125: break;
        case 18: 
          { lexeme=yytext(); return LLAVE_CIERRA;
          }
        case 126: break;
        case 6: 
          { lexeme=yytext(); return DIAGONAL;
          }
        case 127: break;
        case 40: 
          { lexeme=yytext(); return USE;
          }
        case 128: break;
        case 17: 
          { lexeme=yytext(); return LLAVE_ABIERTA;
          }
        case 129: break;
        case 25: 
          { lexeme=yytext(); return VARIABLE;
          }
        case 130: break;
        case 86: 
          { lexeme=yytext(); return REQUIRE;
          }
        case 131: break;
        case 54: 
          { lexeme=yytext(); return EMPTY;
          }
        case 132: break;
        case 8: 
          { lexeme=yytext(); return MENOR;
          }
        case 133: break;
        case 99: 
          { lexeme=yytext(); return ENDFOREACH;
          }
        case 134: break;
        case 43: 
          { lexeme=yytext(); return XOR;
          }
        case 135: break;
        case 9: 
          { lexeme=yytext(); return MAYOR;
          }
        case 136: break;
        case 68: 
          { lexeme=yytext(); return ABRE_HTML;
          }
        case 137: break;
        case 51: 
          { lexeme=yytext(); return ABRE_PHP;
          }
        case 138: break;
        case 56: 
          { lexeme=yytext(); return ARRAY;
          }
        case 139: break;
        case 67: 
          { lexeme=yytext(); return WHILE;
          }
        case 140: break;
        case 63: 
          { lexeme=yytext(); return CONST;
          }
        case 141: break;
        case 104: 
          { lexeme=yytext(); return HALTCOM;
          }
        case 142: break;
        case 95: 
          { lexeme=yytext(); return INTERFACE;
          }
        case 143: break;
        case 77: 
          { lexeme=yytext(); return GLOBAL;
          }
        case 144: break;
        case 26: 
          { lexeme=yytext(); return MENOR_IGUAL;
          }
        case 145: break;
        case 10: 
          { lexeme=yytext(); return MULTIPLICACION;
          }
        case 146: break;
        case 45: 
          { lexeme=yytext(); return ELSE;
          }
        case 147: break;
        case 58: 
          { lexeme=yytext(); return BREAK;
          }
        case 148: break;
        case 53: 
          { lexeme=yytext(); return TRAIT;
          }
        case 149: break;
        case 103: 
          { lexeme=yytext(); return REQUIRE_ONCE;
          }
        case 150: break;
        case 78: 
          { lexeme=yytext(); return CIERRA_HTML;
          }
        case 151: break;
        case 50: 
          { lexeme=yytext(); return GOTO;
          }
        case 152: break;
        case 70: 
          { lexeme=yytext(); return ABRE_BODY;
          }
        case 153: break;
        case 49: 
          { lexeme=yytext(); return CASE;
          }
        case 154: break;
        case 98: 
          { lexeme=yytext(); return ENDDECLARE;
          }
        case 155: break;
        case 59: 
          { lexeme=yytext(); return YIELD;
          }
        case 156: break;
        case 4: 
          { lexeme=yytext(); return STRING;
          }
        case 157: break;
        case 94: 
          { lexeme=yytext(); return ENDSWITCH;
          }
        case 158: break;
        case 61: 
          { lexeme=yytext(); return CLONE;
          }
        case 159: break;
        case 29: 
          { lexeme=yytext(); return DO;
          }
        case 160: break;
        case 44: 
          { lexeme=yytext(); return LIST;
          }
        case 161: break;
        case 62: 
          { lexeme=yytext(); return CATCH;
          }
        case 162: break;
        case 69: 
          { lexeme=yytext(); return ABRE_HEAD;
          }
        case 163: break;
        case 48: 
          { lexeme=yytext(); return EXIT;
          }
        case 164: break;
        case 82: 
          { lexeme=yytext(); return EXTENDS;
          }
        case 165: break;
        case 1: 
          { lexeme=yytext(); return INT;
          }
        case 166: break;
        case 15: 
          { lexeme=yytext(); return DOSPUNTOS;
          }
        case 167: break;
        case 80: 
          { lexeme=yytext(); return CIERRA_BODY;
          }
        case 168: break;
        case 3: 
          { /*Ignore*/;
          }
        case 169: break;
        case 14: 
          { lexeme=yytext(); return PUNTOCOMA;
          }
        case 170: break;
        case 102: 
          { lexeme=yytext(); return INCLUDE_ONCE;
          }
        case 171: break;
        case 2: 
          { lexeme=yytext(); return ERROR;
          }
        case 172: break;
        case 27: 
          { lexeme=yytext(); return MAYOR_IGUAL;
          }
        case 173: break;
        case 42: 
          { lexeme=yytext(); return VAR;
          }
        case 174: break;
        case 101: 
          { lexeme=yytext(); return INSTANCEOF;
          }
        case 175: break;
        case 16: 
          { lexeme=yytext(); return COMA;
          }
        case 176: break;
        case 96: 
          { lexeme=yytext(); return INSTEADOF;
          }
        case 177: break;
        case 22: 
          { lexeme=yytext(); return NOT;
          }
        case 178: break;
        case 31: 
          { lexeme=yytext(); return OR;
          }
        case 179: break;
        case 100: 
          { lexeme=yytext(); return IMPLEMENTS;
          }
        case 180: break;
        case 79: 
          { lexeme=yytext(); return CIERRA_HEAD;
          }
        case 181: break;
        case 85: 
          { lexeme=yytext(); return INCLUDE;
          }
        case 182: break;
        case 60: 
          { lexeme=yytext(); return CLASS;
          }
        case 183: break;
        case 35: 
          { lexeme=yytext(); return OR_BOOLEANO;
          }
        case 184: break;
        case 24: 
          { lexeme=yytext(); return INTERROGACION;
          }
        case 185: break;
        case 5: 
          { lexeme=yytext(); return RESTA;
          }
        case 186: break;
        case 88: 
          { lexeme=yytext(); return CIERRA_TITLE;
          }
        case 187: break;
        case 36: 
          { lexeme=yytext(); return CIERRA_PHP;
          }
        case 188: break;
        case 81: 
          { lexeme=yytext(); return ABRE_TITLE;
          }
        case 189: break;
        case 7: 
          { lexeme=yytext(); return DECLARACION;
          }
        case 190: break;
        case 66: 
          { lexeme=yytext(); return FINAL;
          }
        case 191: break;
        case 41: 
          { lexeme=yytext(); return FOR;
          }
        case 192: break;
        case 71: 
          { lexeme=yytext(); return ELSEIF;
          }
        case 193: break;
        case 21: 
          { lexeme=yytext(); return SUMA;
          }
        case 194: break;
        case 11: 
          { lexeme=yytext(); return IGUAL;
          }
        case 195: break;
        case 30: 
          { lexeme=yytext(); return IF;
          }
        case 196: break;
        case 87: 
          { lexeme=yytext(); return FOREACH;
          }
        case 197: break;
        case 72: 
          { lexeme=yytext(); return ENDFOR;
          }
        case 198: break;
        case 64: 
          { lexeme=yytext(); return PRINT;
          }
        case 199: break;
        case 93: 
          { lexeme=yytext(); return FUNCTION;
          }
        case 200: break;
        case 34: 
          { lexeme=yytext(); return AND_BOOLEANO;
          }
        case 201: break;
        case 89: 
          { lexeme=yytext(); return ENDWHILE;
          }
        case 202: break;
        case 84: 
          { lexeme=yytext(); return DEFAULT;
          }
        case 203: break;
        case 46: 
          { lexeme=yytext(); return ECHO;
          }
        case 204: break;
        case 92: 
          { lexeme=yytext(); return CONTINUE;
          }
        case 205: break;
        case 91: 
          { lexeme=yytext(); return CALLABLE;
          }
        case 206: break;
        case 32: 
          { lexeme=yytext(); return ASIGNACION;
          }
        case 207: break;
        case 75: 
          { lexeme=yytext(); return STACTIC;
          }
        case 208: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
