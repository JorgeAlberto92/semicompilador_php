
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 23 14:44:56 CDT 2015
//----------------------------------------------------

package Sintactico;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import phpmorita.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 23 14:44:56 CDT 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\004" +
    "\016\000\002\007\003\000\002\007\002\000\002\003\004" +
    "\000\002\003\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\012\012\000" +
    "\002\013\006\000\002\013\002\000\002\014\011\000\002" +
    "\015\006\000\002\020\004\000\002\016\005\000\002\016" +
    "\007\000\002\017\007\000\002\017\011\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\004\004\001\002\000\004\005\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\150\012\001\002\000\004\007\013\001\002\000\004" +
    "\010\014\001\002\000\004\011\015\001\002\000\004\012" +
    "\016\001\002\000\016\043\021\116\031\142\027\144\020" +
    "\147\034\152\026\001\002\000\022\013\uffdf\043\uffdf\116" +
    "\uffdf\141\uffdf\142\uffdf\144\uffdf\147\uffdf\152\uffdf\001\002" +
    "\000\004\120\136\001\002\000\012\017\130\120\037\151" +
    "\043\152\041\001\002\000\022\013\uffdd\043\uffdd\116\uffdd" +
    "\141\uffdd\142\uffdd\144\uffdd\147\uffdd\152\uffdd\001\002\000" +
    "\022\013\uffe1\043\uffe1\116\uffe1\141\uffe1\142\uffe1\144\uffe1" +
    "\147\uffe1\152\uffe1\001\002\000\020\013\125\043\021\116" +
    "\031\142\027\144\020\147\034\152\026\001\002\000\022" +
    "\013\uffe2\043\uffe2\116\uffe2\141\uffe2\142\uffe2\144\uffe2\147" +
    "\uffe2\152\uffe2\001\002\000\004\137\122\001\002\000\004" +
    "\120\064\001\002\000\022\013\ufffb\043\ufffb\116\ufffb\141" +
    "\ufffb\142\ufffb\144\ufffb\147\ufffb\152\ufffb\001\002\000\004" +
    "\120\036\001\002\000\022\013\uffe0\043\uffe0\116\uffe0\141" +
    "\uffe0\142\uffe0\144\uffe0\147\uffe0\152\uffe0\001\002\000\022" +
    "\013\uffde\043\uffde\116\uffde\141\uffde\142\uffde\144\uffde\147" +
    "\uffde\152\uffde\001\002\000\004\122\035\001\002\000\022" +
    "\013\uffe7\043\uffe7\116\uffe7\141\uffe7\142\uffe7\144\uffe7\147" +
    "\uffe7\152\uffe7\001\002\000\012\017\040\120\037\151\043" +
    "\152\041\001\002\000\010\120\037\151\043\152\041\001" +
    "\002\000\004\150\056\001\002\000\032\121\ufff5\122\ufff5" +
    "\123\ufff5\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\133" +
    "\ufff5\134\ufff5\135\ufff5\136\ufff5\001\002\000\014\121\050" +
    "\123\047\124\044\125\045\126\046\001\002\000\032\121" +
    "\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127\ufff6" +
    "\130\ufff6\133\ufff6\134\ufff6\135\ufff6\136\ufff6\001\002\000" +
    "\010\120\037\151\043\152\041\001\002\000\010\120\037" +
    "\151\043\152\041\001\002\000\010\120\037\151\043\152" +
    "\041\001\002\000\010\120\037\151\043\152\041\001\002" +
    "\000\004\122\051\001\002\000\022\013\uffe4\043\uffe4\116" +
    "\uffe4\141\uffe4\142\uffe4\144\uffe4\147\uffe4\152\uffe4\001\002" +
    "\000\032\121\ufffa\122\ufffa\123\ufffa\124\ufffa\125\045\126" +
    "\046\127\ufffa\130\ufffa\133\ufffa\134\ufffa\135\ufffa\136\ufffa" +
    "\001\002\000\032\121\ufff7\122\ufff7\123\ufff7\124\ufff7\125" +
    "\ufff7\126\ufff7\127\ufff7\130\ufff7\133\ufff7\134\ufff7\135\ufff7" +
    "\136\ufff7\001\002\000\032\121\ufff8\122\ufff8\123\ufff8\124" +
    "\ufff8\125\ufff8\126\ufff8\127\ufff8\130\ufff8\133\ufff8\134\ufff8" +
    "\135\ufff8\136\ufff8\001\002\000\032\121\ufff9\122\ufff9\123" +
    "\ufff9\124\ufff9\125\045\126\046\127\ufff9\130\ufff9\133\ufff9" +
    "\134\ufff9\135\ufff9\136\ufff9\001\002\000\004\017\057\001" +
    "\002\000\004\121\060\001\002\000\004\122\061\001\002" +
    "\000\022\013\uffe3\043\uffe3\116\uffe3\141\uffe3\142\uffe3\144" +
    "\uffe3\147\uffe3\152\uffe3\001\002\000\014\121\063\123\047" +
    "\124\044\125\045\126\046\001\002\000\032\121\ufff4\122" +
    "\ufff4\123\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4" +
    "\133\ufff4\134\ufff4\135\ufff4\136\ufff4\001\002\000\010\120" +
    "\065\151\043\152\041\001\002\000\010\120\065\151\043" +
    "\152\041\001\002\000\010\121\101\135\102\136\100\001" +
    "\002\000\022\123\047\124\044\125\045\126\046\127\071" +
    "\130\070\133\072\134\073\001\002\000\010\120\037\151" +
    "\043\152\041\001\002\000\010\120\037\151\043\152\041" +
    "\001\002\000\010\120\037\151\043\152\041\001\002\000" +
    "\010\120\037\151\043\152\041\001\002\000\020\121\ufff0" +
    "\123\047\124\044\125\045\126\046\135\ufff0\136\ufff0\001" +
    "\002\000\020\121\ufff1\123\047\124\044\125\045\126\046" +
    "\135\ufff1\136\ufff1\001\002\000\020\121\uffee\123\047\124" +
    "\044\125\045\126\046\135\uffee\136\uffee\001\002\000\020" +
    "\121\uffef\123\047\124\044\125\045\126\046\135\uffef\136" +
    "\uffef\001\002\000\010\120\065\151\043\152\041\001\002" +
    "\000\004\140\104\001\002\000\010\120\065\151\043\152" +
    "\041\001\002\000\010\121\ufff3\135\ufff3\136\ufff3\001\002" +
    "\000\020\043\021\116\031\141\ufffd\142\027\144\020\147" +
    "\034\152\026\001\002\000\004\141\110\001\002\000\020" +
    "\043\021\116\031\141\ufffe\142\027\144\020\147\034\152" +
    "\026\001\002\000\022\013\ufffc\043\ufffc\116\ufffc\141\ufffc" +
    "\142\ufffc\144\ufffc\147\ufffc\152\ufffc\001\002\000\024\013" +
    "\uffea\043\uffea\116\uffea\141\uffea\142\uffea\143\112\144\uffea" +
    "\147\uffea\152\uffea\001\002\000\022\013\uffec\043\uffec\116" +
    "\uffec\141\uffec\142\uffec\144\uffec\147\uffec\152\uffec\001\002" +
    "\000\004\140\113\001\002\000\020\043\021\116\031\141" +
    "\ufffd\142\027\144\020\147\034\152\026\001\002\000\004" +
    "\141\115\001\002\000\022\013\uffeb\043\uffeb\116\uffeb\141" +
    "\uffeb\142\uffeb\144\uffeb\147\uffeb\152\uffeb\001\002\000\010" +
    "\121\ufff2\135\ufff2\136\ufff2\001\002\000\010\121\121\135" +
    "\102\136\100\001\002\000\024\121\063\123\047\124\044" +
    "\125\045\126\046\127\071\130\070\133\072\134\073\001" +
    "\002\000\010\121\uffed\135\uffed\136\uffed\001\002\000\010" +
    "\120\037\151\043\152\041\001\002\000\014\122\124\123" +
    "\047\124\044\125\045\126\046\001\002\000\022\013\uffe8" +
    "\043\uffe8\116\uffe8\141\uffe8\142\uffe8\144\uffe8\147\uffe8\152" +
    "\uffe8\001\002\000\004\014\126\001\002\000\004\015\127" +
    "\001\002\000\004\002\uffff\001\002\000\004\150\133\001" +
    "\002\000\014\122\132\123\047\124\044\125\045\126\046" +
    "\001\002\000\022\013\uffe6\043\uffe6\116\uffe6\141\uffe6\142" +
    "\uffe6\144\uffe6\147\uffe6\152\uffe6\001\002\000\004\017\134" +
    "\001\002\000\004\122\135\001\002\000\022\013\uffe5\043" +
    "\uffe5\116\uffe5\141\uffe5\142\uffe5\144\uffe5\147\uffe5\152\uffe5" +
    "\001\002\000\010\120\065\151\043\152\041\001\002\000" +
    "\010\121\140\135\102\136\100\001\002\000\004\140\141" +
    "\001\002\000\020\043\021\116\031\141\ufffd\142\027\144" +
    "\020\147\034\152\026\001\002\000\004\141\143\001\002" +
    "\000\022\013\uffe9\043\uffe9\116\uffe9\141\uffe9\142\uffe9\144" +
    "\uffe9\147\uffe9\152\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\023\005\027\012\024\014\022\015\031\016\016\017" +
    "\032\020\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\106\012\024\014\022\015\031\016\016" +
    "\017\032\020\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\041\001\001\000\004\010\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\054\001\001\000\004" +
    "\010\053\001\001\000\004\010\052\001\001\000\004\010" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\066\011\065\001\001\000\006\010\117\011\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\076\001\001\000\004\010\075\001\001\000\004\010\074" +
    "\001\001\000\004\010\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\066\011\115\001\001\000\002\001\001\000\006\010" +
    "\066\011\102\001\001\000\002\001\001\000\024\003\105" +
    "\005\027\007\104\012\024\014\022\015\031\016\016\017" +
    "\032\020\021\001\001\000\002\001\001\000\020\005\106" +
    "\012\024\014\022\015\031\016\016\017\032\020\021\001" +
    "\001\000\002\001\001\000\004\013\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\105\005\027\007" +
    "\113\012\024\014\022\015\031\016\016\017\032\020\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\066\011\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\105\005\027\007\141\012\024\014\022" +
    "\015\031\016\016\017\032\020\021\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol cur_token) {
        token t = (token) cur_token.value;
        System.out.println("Error sintáctico cerca de \"" + t.getCadena() + "\" : [" + t.getRow() + " : " + t.getCol() + "]");
        Interfaz.rotular("Error sintáctico cerca de \"" + t.getCadena() + "\" : [" + t.getRow() + " : " + t.getCol() + "]");
        if (t.getCadena().isEmpty()) {
            Interfaz.rotular("El análisis a finalizado");
        } else {
            try {
                this.parse();
            } catch (Exception ex) {
                System.out.println("Error");
            }
        }
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        Interfaz.rotular("Error, Ya no se recupera");
        System.out.println("Error, Ya no se recupera");
    }
    
    public void semantic(Symbol cur_token,String n) {
        System.out.println("Error semántico");
    }

    public void semantic(String msg, Object obj) {

    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    void print(String msj)
    {System.out.println(msj);}

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= SentBreak 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= SentPrint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= SentEcho 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= SentAsignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= SentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= SentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SentPrint ::= PRINT ABRIRPAR COMILLA STRING COMILLA CERRARPAR PCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentPrint",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SentPrint ::= PRINT ABRIRPAR Expresion CERRARPAR PCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentPrint",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SentEcho ::= ECHO COMILLA STRING COMILLA PCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentEcho",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentEcho ::= ECHO Expresion PCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentEcho",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SentBreak ::= BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentBreak",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SentAsignacion ::= VARIABLE ASIGNACION Expresion PCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentAsignacion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SentWhile ::= WHILE ABRIRPAR Condicion CERRARPAR ABRIRLLA BloqueSentencias CERRARLLA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentWhile",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SentElse ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentElse",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SentElse ::= ELSE ABRIRLLA BloqueSentencias CERRARLLA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentElse",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SentIf ::= IF ABRIRPAR Condicion CERRARPAR ABRIRLLA BloqueSentencias CERRARLLA SentElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SentIf",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Condicion ::= ABRIRPAR Condicion CERRARPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Condicion ::= Expresion MENQUE Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Condicion ::= Expresion MAYQUE Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Condicion ::= Expresion DIFERENTE Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Condicion ::= Expresion IGUAL Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Condicion ::= Condicion ANDBOOLEANO Condicion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Condicion ::= Condicion ORBOOLEANO Condicion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= ABRIRPAR Expresion CERRARPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expresion ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expresion ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expresion ::= Expresion SLASH Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expresion ::= Expresion MULTIPLICACION Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expresion ::= Expresion RESTA Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expresion ::= Expresion SUMA Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instrucciones ::= Instrucciones Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueSentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueSentencias ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cuerpo ::= ABRIR_HTML ABRE_HEAD ABRE_TITLE STRING CIERRA_TITLE CIERRA_HEAD ABRE_BODY ABRE_PHP Instrucciones CIERRA_PHP CIERRA_BODY CIERRA_HTML 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Cuerpo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

