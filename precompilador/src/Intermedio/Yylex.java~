/* The following code was generated by JFlex 1.4.3 on 28/05/14 08:16 PM */

package Intermedio;
import java_cup.runtime.Symbol;  
import java.lang.System;
import java.io.*;
import Clases.*;
import phpmorita.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/05/14 08:16 PM from the specification file
 * <tt>src/Intermedio/Lexico.jlex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\2\22\0\1\2\1\42\2\0"+
    "\1\7\1\26\1\43\1\31\1\36\1\37\1\25\1\40\1\33\1\41"+
    "\1\44\1\6\12\5\1\0\1\32\1\10\1\27\1\11\1\62\1\0"+
    "\3\4\1\4\7\4\1\4\16\4\4\0\1\30\1\0\1\17\1\22"+
    "\1\45\1\20\1\16\1\54\1\60\1\12\1\21\1\4\1\52\1\15"+
    "\1\14\1\51\1\23\1\46\1\61\1\47\1\50\1\13\1\53\1\56"+
    "\1\55\1\57\1\24\1\4\1\34\1\3\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\11\5\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\1\1\27\12\5\1\1\1\30\1\31"+
    "\4\0\1\32\1\0\1\33\13\5\1\34\3\5\1\35"+
    "\3\5\1\36\1\5\1\37\1\5\1\0\1\40\1\5"+
    "\1\41\1\42\1\43\22\5\1\44\10\0\2\5\1\45"+
    "\12\5\1\46\2\5\1\47\7\5\1\50\16\5\1\51"+
    "\2\5\1\52\2\5\1\53\1\54\2\5\11\0\2\5"+
    "\1\55\1\5\1\56\1\57\5\5\1\60\1\5\1\61"+
    "\20\5\1\62\17\5\1\63\10\0\1\64\1\65\1\66"+
    "\1\67\2\5\1\70\5\5\1\71\3\5\1\72\4\5"+
    "\1\73\1\74\1\5\1\75\1\76\1\77\2\5\1\100"+
    "\1\101\6\5\1\102\1\103\2\5\1\104\1\5\4\0"+
    "\1\105\1\106\1\0\1\107\1\110\2\5\1\111\16\5"+
    "\1\112\1\113\1\5\1\114\1\115\2\5\1\116\1\117"+
    "\1\120\1\0\1\121\1\122\4\5\1\123\1\5\1\124"+
    "\1\125\2\5\1\126\6\5\1\127\1\130\1\5\1\131"+
    "\3\5\1\132\1\133\6\5\1\134\1\135\2\5\1\136"+
    "\1\5\1\137\2\5\1\140\1\5\1\141\2\5\1\142"+
    "\1\5\1\143\1\144\1\145\1\5\1\146\5\5\1\147"+
    "\1\5\1\150\3\5\2\0\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\63\0\146\0\231\0\314\0\63"+
    "\0\377\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\63\0\u0363\0\u0396\0\u03c9"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\u03fc\0\u042f\0\63\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\63"+
    "\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\63\0\u0792\0\63"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\231\0\u09f6\0\u0a29\0\u0a5c\0\231"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\231\0\u0b28\0\231\0\u0b5b\0\u0b8e"+
    "\0\63\0\u0bc1\0\63\0\63\0\63\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\63"+
    "\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\u1122\0\u1155\0\231\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\231\0\u1386\0\u13b9"+
    "\0\231\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\63\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683"+
    "\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\231"+
    "\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\231\0\231\0\u191a"+
    "\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2"+
    "\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\231\0\u1bb1\0\u1be4\0\231"+
    "\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\231\0\u1d16\0\231"+
    "\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae"+
    "\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\231\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab"+
    "\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343"+
    "\0\231\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8"+
    "\0\u24db\0\63\0\231\0\231\0\231\0\u250e\0\u2541\0\231"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\231\0\u2673\0\u26a6"+
    "\0\u26d9\0\231\0\u270c\0\u273f\0\u2772\0\u27a5\0\231\0\231"+
    "\0\u27d8\0\231\0\231\0\231\0\u280b\0\u283e\0\231\0\231"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\231\0\231"+
    "\0\u29a3\0\u29d6\0\231\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5"+
    "\0\63\0\63\0\u2b08\0\63\0\231\0\u2b3b\0\u2b6e\0\u2ba1"+
    "\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39"+
    "\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\231\0\231"+
    "\0\u2e9e\0\231\0\231\0\u2ed1\0\u2f04\0\231\0\63\0\63"+
    "\0\u2f37\0\63\0\63\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\231"+
    "\0\u3036\0\231\0\231\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135"+
    "\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234\0\231\0\u3267\0\63"+
    "\0\u329a\0\u32cd\0\u3300\0\231\0\231\0\u3333\0\u3366\0\u3399"+
    "\0\u33cc\0\u33ff\0\u3432\0\231\0\231\0\u3465\0\u3498\0\231"+
    "\0\u34cb\0\231\0\u34fe\0\u3531\0\231\0\u3564\0\231\0\u3597"+
    "\0\u35ca\0\231\0\u35fd\0\231\0\231\0\231\0\u3630\0\231"+
    "\0\u3663\0\u3696\0\u36c9\0\u36fc\0\u372f\0\231\0\u3762\0\231"+
    "\0\u3795\0\u37c8\0\u37fb\0\u382e\0\u3861\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\6\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\6\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\6\1\57\66\0\1\60\63\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\15\6\6\0\1\7\61\0\1\61"+
    "\5\0\13\61\3\0\1\61\14\0\15\61\7\0\1\62"+
    "\3\0\1\63\1\64\6\0\1\65\4\0\1\66\32\0"+
    "\1\67\27\0\1\70\37\0\2\6\4\0\1\71\12\6"+
    "\3\0\1\6\14\0\2\6\1\72\12\6\5\0\2\6"+
    "\4\0\7\6\1\73\3\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\2\6\1\74\1\75\7\6\3\0"+
    "\1\6\14\0\1\76\3\6\1\77\4\6\1\100\1\101"+
    "\2\6\5\0\2\6\4\0\10\6\1\102\2\6\3\0"+
    "\1\6\14\0\2\6\1\103\1\104\1\105\10\6\5\0"+
    "\2\6\4\0\4\6\1\106\2\6\1\107\1\6\1\110"+
    "\1\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\2\6\1\111\10\6\3\0\1\6\14\0\3\6\1\112"+
    "\1\113\2\6\1\114\5\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\2\6\1\115\12\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\2\6\1\116\12\6"+
    "\5\0\2\6\4\0\7\6\1\117\3\6\3\0\1\6"+
    "\14\0\15\6\27\0\1\120\63\0\1\121\37\0\2\6"+
    "\4\0\13\6\3\0\1\122\14\0\15\6\30\0\1\123"+
    "\62\0\1\124\13\0\1\125\23\0\2\6\4\0\3\6"+
    "\1\126\1\6\1\127\3\6\1\130\1\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\13\6\3\0\1\6"+
    "\14\0\2\6\1\131\3\6\1\132\6\6\5\0\2\6"+
    "\4\0\4\6\1\133\6\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\1\6\1\134\11\6\3\0\1\6"+
    "\14\0\10\6\1\135\4\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\3\6\1\136\1\137\10\6\5\0"+
    "\2\6\4\0\7\6\1\140\1\6\1\141\1\6\3\0"+
    "\1\6\14\0\6\6\1\142\6\6\5\0\2\6\4\0"+
    "\1\143\12\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\5\6\1\144\5\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\11\6\1\145\1\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\3\6\1\146\5\6"+
    "\1\147\1\6\3\0\1\6\14\0\15\6\12\0\1\150"+
    "\55\0\2\61\4\0\13\61\3\0\1\61\14\0\15\61"+
    "\13\0\1\151\1\152\6\0\1\153\53\0\1\154\2\0"+
    "\1\155\65\0\1\156\64\0\1\157\105\0\1\160\20\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\2\6\1\161"+
    "\12\6\5\0\2\6\4\0\5\6\1\162\4\6\1\163"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\3\6\1\164\11\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\1\6\1\165\13\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\3\6"+
    "\1\166\11\6\5\0\2\6\4\0\1\167\12\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\6\6\1\170"+
    "\4\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\5\6\1\171\5\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\1\6\1\172\5\6\1\173\3\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\6\14\0\3\6\1\174\11\6\5\0\2\6\4\0"+
    "\13\6\3\0\1\6\14\0\2\6\1\175\12\6\5\0"+
    "\2\6\4\0\6\6\1\176\4\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\1\177\6\6\1\200\5\6\5\0\2\6\4\0\4\6"+
    "\1\201\6\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\1\6\1\202\13\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\3\6"+
    "\1\203\11\6\5\0\2\6\4\0\1\6\1\204\11\6"+
    "\3\0\1\6\14\0\1\205\2\6\1\206\11\6\5\0"+
    "\2\6\4\0\4\6\1\207\6\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\4\6\1\210\6\6\3\0"+
    "\1\6\14\0\15\6\11\0\1\211\56\0\2\6\4\0"+
    "\1\212\12\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\5\6\1\213\3\6\1\214\1\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\1\6\1\215\1\6"+
    "\1\216\7\6\3\0\1\6\14\0\3\6\1\217\11\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\4\6"+
    "\1\220\10\6\5\0\2\6\4\0\7\6\1\221\1\6"+
    "\1\222\1\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\10\6\1\223\2\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\1\6\1\224\11\6\3\0\1\6"+
    "\14\0\14\6\1\225\5\0\2\6\4\0\5\6\1\226"+
    "\5\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\7\6\1\227\3\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\4\6\1\230\6\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\3\6\1\231\11\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\6\14\0\4\6\1\232\10\6\5\0\2\6\4\0"+
    "\13\6\3\0\1\6\14\0\2\6\1\233\12\6\5\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\4\6\1\234"+
    "\10\6\5\0\2\6\4\0\7\6\1\235\3\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\6\14\0\2\6\1\236\12\6\5\0\2\6\4\0"+
    "\13\6\3\0\1\6\14\0\2\6\1\237\12\6\5\0"+
    "\2\6\4\0\11\6\1\240\1\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\1\6\1\241\11\6\3\0"+
    "\1\6\14\0\15\6\14\0\1\242\2\0\1\243\65\0"+
    "\1\244\64\0\1\245\53\0\1\246\65\0\1\247\56\0"+
    "\1\250\67\0\1\251\54\0\1\252\54\0\2\6\4\0"+
    "\11\6\1\253\1\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\7\6\1\254\3\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\1\6\1\255\11\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\1\6\1\256"+
    "\11\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\4\6\1\257\6\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\11\6\1\260\1\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\6\6\1\261\1\262\3\6"+
    "\3\0\1\6\14\0\3\6\1\263\3\6\1\264\1\265"+
    "\4\6\5\0\2\6\4\0\3\6\1\266\7\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\4\6\1\267"+
    "\6\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\1\6\1\270\11\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\1\6\1\271\11\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\5\6\1\272\5\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\3\6\1\273"+
    "\7\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\5\6\1\274\5\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\3\6\1\275\7\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\4\6\1\276\6\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\4\6\1\277"+
    "\6\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\3\6\1\300\7\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\1\6\1\301\11\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\5\6\1\302\5\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\3\6\1\303"+
    "\7\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\5\6\1\304\5\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\3\6\1\305"+
    "\11\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\4\6\1\306\10\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\6\14\0\1\307\14\6\5\0\2\6\4\0\3\6"+
    "\1\310\7\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\4\6\1\311\6\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\1\6\1\312\11\6\3\0\1\6"+
    "\14\0\3\6\1\313\11\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\4\6\1\314\10\6\5\0\2\6"+
    "\4\0\1\6\1\315\11\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\3\6\1\316\7\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\13\6\3\0\1\6"+
    "\14\0\6\6\1\317\6\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\6\6\1\320\6\6\5\0\2\6"+
    "\4\0\1\6\1\321\11\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\1\6\1\322\11\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\4\6\1\323\6\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\5\6"+
    "\1\324\5\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\4\6\1\325\6\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\1\326"+
    "\14\6\5\0\2\6\4\0\3\6\1\327\7\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\10\6\1\330"+
    "\2\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\11\6\1\331\1\6\3\0\1\6\14\0\15\6\15\0"+
    "\1\332\65\0\1\333\56\0\1\334\67\0\1\335\57\0"+
    "\1\336\65\0\1\337\57\0\1\340\71\0\1\341\104\0"+
    "\1\342\20\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\10\6\1\343\4\6\5\0\2\6\4\0\1\6\1\344"+
    "\11\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\12\6\1\345\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\7\6\1\346\3\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\4\6\1\347\6\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\13\6\3\0\1\6"+
    "\14\0\7\6\1\350\5\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\10\6\1\351\4\6\5\0\2\6"+
    "\4\0\11\6\1\352\1\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\1\353\12\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\4\6\1\354\10\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\6\14\0\2\6\1\355\12\6\5\0\2\6\4\0"+
    "\12\6\1\356\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\5\6\1\357\5\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\6\6"+
    "\1\360\6\6\5\0\2\6\4\0\4\6\1\361\6\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\1\6"+
    "\1\362\11\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\2\6\1\363\12\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\6\6"+
    "\1\364\6\6\5\0\2\6\4\0\4\6\1\365\1\366"+
    "\5\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\13\6\3\0\1\6\14\0\5\6\1\367\7\6\5\0"+
    "\2\6\4\0\6\6\1\370\4\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\3\6\1\371\7\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\6\14\0\3\6\1\372\11\6\5\0\2\6\4\0"+
    "\4\6\1\373\6\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\1\374\12\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\5\6\1\375\5\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\7\6\1\376\3\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\1\6"+
    "\1\377\11\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\1\6\1\u0100\11\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\4\6\1\u0101\6\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\7\6\1\u0102\3\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\2\6\1\u0103\12\6\5\0\2\6"+
    "\4\0\7\6\1\u0104\3\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\7\6\1\u0105\3\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\13\6\3\0\1\6"+
    "\14\0\1\u0106\14\6\5\0\2\6\4\0\1\6\1\u0107"+
    "\11\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\3\6\1\u0108\7\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\5\6\1\u0109\5\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\1\6\1\u010a\11\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\4\6\1\u010b"+
    "\6\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\5\6\1\u010c\5\6\3\0\1\6\14\0\15\6\16\0"+
    "\1\u010d\65\0\1\u010e\57\0\1\u010f\71\0\1\u0110\47\0"+
    "\1\u0111\62\0\1\u0112\67\0\1\u0113\55\0\1\u0114\55\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\7\6\1\u0115"+
    "\5\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\1\u0116\14\6\5\0\2\6\4\0\7\6\1\u0117\3\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\2\6\1\u0118\12\6\5\0\2\6"+
    "\4\0\7\6\1\u0119\3\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\6\6\1\u011a\4\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\5\6\1\u011b\5\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\2\6\1\u011c\12\6\5\0\2\6"+
    "\4\0\3\6\1\u011d\7\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\2\6\1\u011e\10\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\13\6\3\0\1\6"+
    "\14\0\7\6\1\u011f\5\6\5\0\2\6\4\0\6\6"+
    "\1\u0120\4\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\5\6\1\u0121\5\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\4\6"+
    "\1\u0122\10\6\5\0\2\6\4\0\1\6\1\u0123\11\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\10\6"+
    "\1\u0124\2\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\4\6\1\u0125\10\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\1\u0126"+
    "\14\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\1\u0127\14\6\5\0\2\6\4\0\13\6\3\0\1\6"+
    "\14\0\4\6\1\u0128\10\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\2\6\1\u0129\12\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\1\u012a\14\6\5\0"+
    "\2\6\4\0\1\u012b\12\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\1\u012c"+
    "\14\6\5\0\2\6\4\0\7\6\1\u012d\3\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\3\6\1\u012e"+
    "\7\6\3\0\1\6\14\0\15\6\12\0\1\u012f\62\0"+
    "\1\u0130\67\0\1\u0131\55\0\1\u0132\62\0\1\u0133\55\0"+
    "\2\6\4\0\3\6\1\u0134\7\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\1\6\1\u0135\11\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\4\6\1\u0136"+
    "\6\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\3\6\1\u0137\7\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\3\6\1\u0138"+
    "\11\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\1\u0139\14\6\5\0\2\6\4\0\4\6\1\u013a\6\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\1\6"+
    "\1\u013b\11\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\4\6\1\u013c\6\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\5\6\1\u013d\5\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\4\6\1\u013e\6\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\6\6"+
    "\1\u013f\4\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\1\u0140\14\6\5\0"+
    "\2\6\4\0\13\6\3\0\1\u0141\14\0\15\6\5\0"+
    "\2\6\4\0\3\6\1\u0142\7\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\6\6\1\u0143\6\6\5\0\2\6\4\0\1\6\1\u0144"+
    "\11\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\4\6\1\u0145\6\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\1\u0146\12\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\11\6\1\u0147\1\6\3\0\1\6"+
    "\14\0\15\6\12\0\1\u0148\55\0\2\6\4\0\5\6"+
    "\1\u0149\5\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\1\u014a\14\6\5\0"+
    "\2\6\4\0\5\6\1\u014b\5\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\4\6\1\u014c\6\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\1\6\1\u014d"+
    "\11\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\13\6\3\0\1\6\14\0\4\6\1\u014e\10\6\5\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\1\u014f\14\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\u0150\14\0\15\6"+
    "\5\0\2\6\4\0\11\6\1\u0151\1\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\4\6\1\u0152\6\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\1\u0153\14\6\5\0\2\6\4\0"+
    "\4\6\1\u0154\6\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\4\6\1\u0155\6\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\4\6\1\u0156\6\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\u0157\14\0\15\6\5\0\2\6\4\0\13\6\3\0"+
    "\1\6\14\0\4\6\1\u0158\10\6\5\0\2\6\4\0"+
    "\13\6\3\0\1\6\14\0\2\6\1\u0159\12\6\5\0"+
    "\2\6\4\0\1\u015a\12\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\1\u015b"+
    "\14\6\5\0\2\6\4\0\1\6\1\u015c\11\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\4\6\1\u015d"+
    "\6\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\11\6\1\u015e\1\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\7\6\1\u015f"+
    "\5\6\5\0\2\6\4\0\11\6\1\u0160\1\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\11\6\1\u0161"+
    "\1\6\3\0\1\6\14\0\15\6\5\0\2\6\4\0"+
    "\6\6\1\u0162\4\6\3\0\1\6\14\0\15\6\5\0"+
    "\2\6\4\0\11\6\1\u0163\1\6\3\0\1\6\14\0"+
    "\15\6\5\0\2\6\4\0\4\6\1\u0164\6\6\3\0"+
    "\1\6\14\0\15\6\5\0\2\6\4\0\1\u0165\12\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\3\6\1\u0166\11\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\4\6\1\u0167\10\6"+
    "\5\0\2\6\4\0\13\6\3\0\1\6\14\0\7\6"+
    "\1\u0168\5\6\5\0\2\6\4\0\2\6\1\u0169\10\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\4\6\1\u016a\10\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\14\0\1\u016b\14\6\5\0"+
    "\2\6\4\0\13\6\3\0\1\6\14\0\1\6\1\u016c"+
    "\13\6\5\0\2\6\4\0\13\6\3\0\1\6\14\0"+
    "\1\u016d\14\6\5\0\2\6\4\0\4\6\1\u016e\6\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\7\6"+
    "\1\u016f\3\6\3\0\1\6\14\0\15\6\5\0\2\6"+
    "\4\0\4\6\1\u0170\6\6\3\0\1\6\14\0\15\6"+
    "\5\0\2\6\4\0\3\6\1\u0171\7\6\3\0\1\6"+
    "\14\0\15\6\5\0\2\6\4\0\4\6\1\u0172\6\6"+
    "\3\0\1\6\14\0\15\6\5\0\2\6\4\0\13\6"+
    "\3\0\1\6\14\0\2\6\1\u0173\12\6\5\0\2\6"+
    "\4\0\13\6\3\0\1\6\5\0\1\u0174\6\0\15\6"+
    "\40\0\1\u0175\55\0\1\u0176\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\1\11\14\1\1\11\3\1\11\11"+
    "\2\1\1\11\13\1\1\11\1\1\4\0\1\11\1\0"+
    "\1\11\27\1\1\0\1\11\1\1\3\11\22\1\1\11"+
    "\10\0\30\1\1\11\30\1\11\0\57\1\10\0\1\11"+
    "\52\1\4\0\2\11\1\0\1\11\32\1\2\11\1\0"+
    "\2\11\24\1\1\11\53\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	String tok = "";

	private Symbol Token(int token, Object lexema) throws IOException {
		int linea = yyline + 1;
		tok = (String)lexema;
		if (token != sym.EOF)
			InformacionCodigo.guardarInformacionCodigo(linea,tok);
		return new Symbol(token, lexema);
	}

	private Symbol Token(int token) throws IOException {
		return Token(token, yytext());
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return Token(sym.SUMA);
          }
        case 106: break;
        case 31: 
          { return Token(sym.OR);
          }
        case 107: break;
        case 55: 
          { return Token(sym.EMPTY);
          }
        case 108: break;
        case 33: 
          { return Token(sym.DIFERENTE);
          }
        case 109: break;
        case 82: 
          { return Token(sym.ABRE_TITLE);
          }
        case 110: break;
        case 75: 
          { return Token(sym.RETURN);
          }
        case 111: break;
        case 41: 
          { return Token(sym.USE);
          }
        case 112: break;
        case 13: 
          { return Token(sym.COMILLA);
          }
        case 113: break;
        case 78: 
          { return Token(sym.GLOBAL);
          }
        case 114: break;
        case 104: 
          { return Token(sym.REQUIRE_ONCE);
          }
        case 115: break;
        case 25: 
          { return Token(sym.VARIABLE, yytext());
          }
        case 116: break;
        case 91: 
          { return Token(sym.ABSTRACT);
          }
        case 117: break;
        case 65: 
          { return Token(sym.PRINT);
          }
        case 118: break;
        case 76: 
          { return Token(sym.STATIC);
          }
        case 119: break;
        case 53: 
          { return Token(sym.THROW);
          }
        case 120: break;
        case 105: 
          { return Token(sym.HALTCOM);
          }
        case 121: break;
        case 87: 
          { return Token(sym.REQUIRE);
          }
        case 122: break;
        case 97: 
          { return Token(sym.INSTEADOF);
          }
        case 123: break;
        case 103: 
          { return Token(sym.INCLUDE_ONCE);
          }
        case 124: break;
        case 70: 
          { return Token(sym.ABRE_HEAD);
          }
        case 125: break;
        case 10: 
          { return Token(sym.MULTIPLICACION);
          }
        case 126: break;
        case 14: 
          { return Token(sym.PCOMA);
          }
        case 127: break;
        case 83: 
          { return Token(sym.EXTENDS);
          }
        case 128: break;
        case 74: 
          { return Token(sym.PUBLIC);
          }
        case 129: break;
        case 64: 
          { return Token(sym.CONST);
          }
        case 130: break;
        case 9: 
          { return Token(sym.MAYQUE);
          }
        case 131: break;
        case 61: 
          { return Token(sym.CLASS);
          }
        case 132: break;
        case 30: 
          { return Token(sym.IF);
          }
        case 133: break;
        case 6: 
          { return Token(sym.INT, yytext());
          }
        case 134: break;
        case 98: 
          { return Token(sym.PROTECTED);
          }
        case 135: break;
        case 81: 
          { return Token(sym.CIERRA_BODY);
          }
        case 136: break;
        case 32: 
          { return Token(sym.IGUAL);
          }
        case 137: break;
        case 50: 
          { return Token(sym.CASE);
          }
        case 138: break;
        case 96: 
          { return Token(sym.INTERFACE);
          }
        case 139: break;
        case 84: 
          { return Token(sym.DECLARE);
          }
        case 140: break;
        case 16: 
          { return Token(sym.ABRIRLLA);
          }
        case 141: break;
        case 59: 
          { return Token(sym.BREAK);
          }
        case 142: break;
        case 11: 
          { return Token(sym.ASIGNACION);
          }
        case 143: break;
        case 102: 
          { return Token(sym.INSTANCEOF);
          }
        case 144: break;
        case 89: 
          { return Token(sym.CIERRA_TITLE);
          }
        case 145: break;
        case 42: 
          { return Token(sym.FOR);
          }
        case 146: break;
        case 60: 
          { return Token(sym.YIELD);
          }
        case 147: break;
        case 5: 
          { return Token(sym.STRING, yytext());
          }
        case 148: break;
        case 100: 
          { return Token(sym.ENDFOREACH);
          }
        case 149: break;
        case 58: 
          { return Token(sym.ISSET);
          }
        case 150: break;
        case 67: 
          { return Token(sym.FINAL);
          }
        case 151: break;
        case 8: 
          { return Token(sym.DECLARA);
          }
        case 152: break;
        case 2: 
          { yychar=0;
          }
        case 153: break;
        case 66: 
          { return Token(sym.UNSET);
          }
        case 154: break;
        case 73: 
          { return Token(sym.ENDFOR);
          }
        case 155: break;
        case 26: 
          { return Token(sym.MENIGU);
          }
        case 156: break;
        case 72: 
          { return Token(sym.ELSEIF);
          }
        case 157: break;
        case 17: 
          { return Token(sym.CERRARLLA);
          }
        case 158: break;
        case 46: 
          { return Token(sym.ELSE);
          }
        case 159: break;
        case 1: 
          { System.out.println("Error léxico en la fila " + yyline + " y en la columna " + yychar);
    Interfaz.rotular("Error léxico: " + yytext() + " en la fila " + yyline + " y en la columna " + yychar);
          }
        case 160: break;
        case 49: 
          { return Token(sym.EXIT);
          }
        case 161: break;
        case 85: 
          { return Token(sym.DEFAULT);
          }
        case 162: break;
        case 77: 
          { return Token(sym.SWITCH);
          }
        case 163: break;
        case 57: 
          { return Token(sym.ARRAY);
          }
        case 164: break;
        case 37: 
          { return Token(sym.TRY);
          }
        case 165: break;
        case 36: 
          { return Token(sym.CIERRA_PHP);
          }
        case 166: break;
        case 24: 
          { return Token(sym.ORBOOLEANO);
          }
        case 167: break;
        case 69: 
          { return Token(sym.ABRIR_HTML);
          }
        case 168: break;
        case 94: 
          { return Token(sym.FUNCTION);
          }
        case 169: break;
        case 88: 
          { return Token(sym.FOREACH);
          }
        case 170: break;
        case 86: 
          { return Token(sym.INCLUDE);
          }
        case 171: break;
        case 28: 
          { return Token(sym.AS);
          }
        case 172: break;
        case 34: 
          { return Token(sym.ANDEQUAL);
          }
        case 173: break;
        case 15: 
          { return Token(sym.COMA);
          }
        case 174: break;
        case 47: 
          { return Token(sym.ECHO);
          }
        case 175: break;
        case 4: 
          { /* Aumenta la columna. */ yychar++;
          }
        case 176: break;
        case 92: 
          { return Token(sym.CALLABLE);
          }
        case 177: break;
        case 52: 
          { return Token(sym.ABRE_PHP);
          }
        case 178: break;
        case 7: 
          { return Token(sym.SLASH);
          }
        case 179: break;
        case 21: 
          { return Token(sym.RESTA);
          }
        case 180: break;
        case 68: 
          { return Token(sym.WHILE);
          }
        case 181: break;
        case 95: 
          { return Token(sym.ENDSWITCH);
          }
        case 182: break;
        case 80: 
          { return Token(sym.CIERRA_HEAD);
          }
        case 183: break;
        case 38: 
          { return Token(sym.AND);
          }
        case 184: break;
        case 45: 
          { return Token(sym.LIST);
          }
        case 185: break;
        case 56: 
          { return Token(sym.ENDIF);
          }
        case 186: break;
        case 18: 
          { return Token(sym.ABRIRPAR);
          }
        case 187: break;
        case 71: 
          { return Token(sym.ABRE_BODY);
          }
        case 188: break;
        case 22: 
          { return Token(sym.NOT);
          }
        case 189: break;
        case 12: 
          { return Token(sym.GBAJO);
          }
        case 190: break;
        case 29: 
          { return Token(sym.DO);
          }
        case 191: break;
        case 54: 
          { return Token(sym.TRAIT);
          }
        case 192: break;
        case 63: 
          { return Token(sym.CATCH);
          }
        case 193: break;
        case 40: 
          { return Token(sym.MENQUE);
          }
        case 194: break;
        case 27: 
          { return Token(sym.MAYIGU);
          }
        case 195: break;
        case 90: 
          { return Token(sym.ENDWHILE);
          }
        case 196: break;
        case 62: 
          { return Token(sym.CLONE);
          }
        case 197: break;
        case 79: 
          { return Token(sym.CIERRA_HTML);
          }
        case 198: break;
        case 19: 
          { return Token(sym.CERRARPAR);
          }
        case 199: break;
        case 23: 
          { return Token(sym.PUNTO);
          }
        case 200: break;
        case 3: 
          { /* Ignorar espacios en blanco. */
          }
        case 201: break;
        case 101: 
          { return Token(sym.IMPLEMENTS);
          }
        case 202: break;
        case 44: 
          { return Token(sym.XOR);
          }
        case 203: break;
        case 48: 
          { return Token(sym.EVAL);
          }
        case 204: break;
        case 43: 
          { return Token(sym.VAR);
          }
        case 205: break;
        case 99: 
          { return Token(sym.ENDDECLARE);
          }
        case 206: break;
        case 93: 
          { return Token(sym.CONTINUE);
          }
        case 207: break;
        case 39: 
          { return Token(sym.DIE);
          }
        case 208: break;
        case 35: 
          { return Token(sym.ANDBOOLEANO);
          }
        case 209: break;
        case 51: 
          { return Token(sym.GOTO);
          }
        case 210: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	{ return Token(sym.EOF); }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
